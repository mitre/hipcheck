// SPDX-License-Identifier: Apache-2.0

//! General shared types and functions for KDL files

use kdl::KdlNode;

// Helper trait to make it easier to parse KdlNodes into our own types
pub trait ParseKdlNode
where
	Self: Sized,
{
	/// Return the name of the attribute used to identify the node pertaining to this struct
	fn kdl_key() -> &'static str;

	/// Attempt to convert a `kdl::KdlNode` into Self
	fn parse_node(node: &KdlNode) -> Option<Self>;
}

/// Use this macro to generate the code needed to parse a KDL node that is a single string, as the
/// code is quite repetitive for this simple task.
///
/// As a bonus, the following code is also generated:
/// - AsRef<String>
/// - new(value: String) -> Self
///
/// NOTE: This only works with newtype wrappers around String!
///
/// Example:
/// publisher "mitre" can be generated by this macro!
///
/// ```rust
/// struct Publisher(pub String)
/// ```
#[macro_export]
macro_rules! string_newtype_parse_kdl_node {
	($type:ty, $identifier:expr) => {
		impl $type {
			#[allow(dead_code)]
			pub fn new(value: String) -> Self {
				Self(value)
			}
		}

		impl ParseKdlNode for $type {
			fn kdl_key() -> &'static str {
				$identifier
			}

			fn parse_node(node: &KdlNode) -> Option<Self> {
				if node.name().to_string().as_str() != Self::kdl_key() {
					return None;
				}
				// NOTE: this macro currently assumes that the first positional argument is the
				// correct value to be parsing, which is true for newtype String wrappers!
				let entry = node.entries().first()?.value().as_string()?.to_string();
				Some(Self(entry))
			}
		}

		impl AsRef<String> for $type {
			fn as_ref(&self) -> &String {
				&self.0
			}
		}
	};
}
