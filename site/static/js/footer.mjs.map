{
  "version": 3,
  "sources": ["../../scripts/src/util/icon.ts", "../../scripts/src/util/web.ts", "../../scripts/src/footer/docs.ts", "../../scripts/src/footer/installer.ts", "../../scripts/src/footer/scroll.ts", "../../scripts/src/util/event.ts", "../../scripts/src/util/html.ts", "../../scripts/src/footer/search.ts", "../../scripts/src/util/theme.ts", "../../scripts/src/footer/theme.ts", "../../scripts/src/footer/main.ts"],
  "sourcesContent": ["export function updateIcon(\n  $node: HTMLElement,\n  oldName: string,\n  newName: string,\n) {\n  const iconUrl = getIconUrl($node);\n  const newIconUrl = iconUrl.replace(`#icon-${oldName}`, `#icon-${newName}`);\n  setIconUrl($node, newIconUrl);\n}\n\n/**\n * Get the URL out of an icon `use` element.\n */\nfunction getIconUrl($node: HTMLElement): string {\n  const iconUrl = $node.getAttributeNS(XLINK_NS, \"href\");\n  if (iconUrl === null) throw new IconError();\n  return iconUrl;\n}\n\n/**\n * Get the URL on an icon `use` element.\n */\nfunction setIconUrl($node: HTMLElement, url: string) {\n  $node.setAttributeNS(XLINK_NS, \"href\", url);\n}\n\n/**\n * The namespace URL for the Xlink namespace\n */\nconst XLINK_NS: string = \"http://www.w3.org/1999/xlink\";\n\n/**\n * Error arising when trying to update the copy-to-clipboard icon.\n */\nclass IconError extends Error {\n  constructor() {\n    super(`could not find copy icon`);\n  }\n}\n", "/**\n * document.querySelector with type conversion and error handling.\n */\nexport function querySelector(selector: string): HTMLElement {\n  const $elem = document.querySelector(selector);\n  if ($elem === null) throw new QueryError(`could not find ${selector}`);\n  return $elem as HTMLElement;\n}\n\n/**\n * document.querySelectorAll with type conversions and error handling.\n */\nexport function querySelectorAll(selector: string): Array<HTMLElement> {\n  const $elems = document.querySelectorAll(selector);\n  if ($elems === null) throw new QueryError(`could not find all '${selector}'`);\n  return Array.from($elems) as Array<HTMLElement>;\n}\n\n/**\n * navigator.clipboard.writeText with error handling.\n */\nexport function copyToClipboard(text: string) {\n  navigator.clipboard.writeText(text).then(null, (reason) => {\n    throw new ClipboardError(reason);\n  });\n}\n\n/**\n * Indicates an error while attempting to put data into the clipboard.\n */\nclass ClipboardError extends Error {\n  constructor(source: unknown) {\n    super(`clipboard copy rejected: '${source}'`);\n  }\n}\n\n/**\n * Indicates an error while trying to select one or more elements on the page.\n */\nclass QueryError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n", "import { updateIcon } from \"../util/icon.ts\";\nimport { querySelectorAll } from \"../util/web.ts\";\n\n/**\n * Sets up the collapse/expand functionality for docs navigation.\n */\nexport function setupDocsNav() {\n  let $toggles;\n\n  try {\n    $toggles = querySelectorAll(\".docs-nav-toggle\");\n  } catch (_e) {\n    // Swallow these errors.\n    return;\n  }\n\n  $toggles.forEach(($toggle) => {\n    // Get the icon inside the toggle.\n    const $toggleIcon = $toggle.querySelector(\n      \".toggle-icon use\",\n    ) as HTMLElement;\n    if ($toggleIcon === null) {\n      console.log(`no icon found for toggle: '${$toggle}'`);\n      return;\n    }\n\n    $toggle.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n\n      // Find the subsection list associated with the current toggle.\n      const $parent = $toggle.parentElement?.parentElement;\n      if ($parent === null || $parent === undefined) return;\n      const $subsection = $parent.querySelector(\n        \".docs-nav-section\",\n      ) as HTMLElement;\n      if ($subsection === null) return;\n\n      // Hide or show it.\n      $subsection.classList.toggle(\"hidden\");\n\n      if (sectionIsHidden($subsection)) {\n        updateIcon($toggleIcon, \"chevron-right\", \"chevron-down\");\n      } else {\n        updateIcon($toggleIcon, \"chevron-down\", \"chevron-right\");\n      }\n    });\n  });\n}\n\nfunction sectionIsHidden($subsection: HTMLElement): boolean {\n  return $subsection.classList.contains(\"hidden\");\n}\n", "import { updateIcon } from \"../util/icon.ts\";\nimport {\n  copyToClipboard,\n  querySelector,\n  querySelectorAll,\n} from \"../util/web.ts\";\n\n/**\n * Setup behavior for the install picker.\n *\n * This makes sure the platform buttons are clickable and update the install\n * command appropriately, and that the copy-to-clipboard button works.\n */\nexport function setupInstallerPicker() {\n  // The buttons used to select the platform.\n  let $buttons: Array<HTMLElement>;\n\n  // The block containing the install command.\n  let $cmd: HTMLElement;\n\n  // The copy-to-clipboard button.\n  let $copy: HTMLElement;\n\n  // The icon inside the copy-to-clipboard button.\n  let $copyIcon: HTMLElement;\n\n  try {\n    $buttons = querySelectorAll(\".installer-button\");\n    $cmd = querySelector(\"#installer-cmd\");\n    $copy = querySelector(\"#installer-copy\");\n    $copyIcon = querySelector(\"#installer-copy > svg > use\");\n  } catch (_e) {\n    // Swallow these errors.\n    return;\n  }\n\n  $buttons.forEach(($button) => {\n    $button.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      $buttons.forEach(($button) => delete $button.dataset.active);\n      $button.dataset.active = \"true\";\n      $cmd.innerText = installerForPlatform($button.dataset.platform);\n    });\n\n    if ($button.dataset.active && $button.dataset.active === \"true\") {\n      $cmd.innerText = installerForPlatform($button.dataset.platform);\n    }\n  });\n\n  $copy.addEventListener(\"click\", (e) => {\n    e.preventDefault();\n    copyToClipboard($cmd.innerText);\n    updateIcon($copyIcon, \"clipboard\", \"check\");\n    // Set the icon back on a timer.\n    setTimeout(() => updateIcon($copyIcon, \"check\", \"clipboard\"), 1_500);\n  });\n}\n\n/**\n * Get the install script based on the chosen platform.\n */\nfunction installerForPlatform(platform: string | undefined): string {\n  if (platform === undefined) throw new UnknownPlatformError(platform);\n\n  switch (platform) {\n    case \"macos\":\n      return UNIX_INSTALLER;\n    case \"linux\":\n      return UNIX_INSTALLER;\n    case \"windows\":\n      return WINDOWS_INSTALLER;\n    default:\n      throw new UnknownPlatformError(platform);\n  }\n}\n\n/**\n * The current host of the site.\n */\nconst HOST: string =\n  `${globalThis.window.location.protocol}//${globalThis.window.location.host}`;\n\n/**\n * The install script to use for Unix (macOS and Linux) platforms.\n */\nconst UNIX_INSTALLER: string = `curl -LsSf ${HOST}/dl/install.sh | sh`;\n\n/**\n * The install script to use for Windows.\n */\nconst WINDOWS_INSTALLER: string = `irm ${HOST}/dl/install.ps1 | iex`;\n\n/**\n * Indicates an error while trying to detect the user's install platform.\n */\nclass UnknownPlatformError extends Error {\n  constructor(platform: string | undefined) {\n    super(\n      `could not determine platform: '${platform || \"undefined\"}'`,\n    );\n  }\n}\n", "import { querySelector, querySelectorAll } from \"../util/web.ts\";\n\nexport function setupSmoothScrolling() {\n  /*\n   * This code from: https://stackoverflow.com/a/7717572\n   * Used under the CC BY-SA 3.0 license with modifications.\n   */\n  querySelectorAll('a[href^=\"#\"]').forEach((anchor) => {\n    anchor.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      if (e.currentTarget === null) return;\n\n      const targetHeader = (e.currentTarget as HTMLElement).getAttribute(\"href\");\n      if (targetHeader === null) return;\n\n      const $header = querySelector(targetHeader);\n      const headerPosition = $header.getBoundingClientRect().top;\n      const scrollAmount = globalThis.window.scrollY;\n      const offsetPosition = headerPosition + scrollAmount;\n\n      globalThis.window.scrollTo({\n        top: offsetPosition,\n        behavior: \"smooth\",\n      });\n    });\n  });\n}\n", "/**\n * Debounce an event handler by waiting `waitFor` number of milliseconds before\n * permitting the event to be triggered again.\n */\nexport function debounce<F extends (...args: Parameters<F>) => ReturnType<F>>(\n  waitFor: number,\n  func: F,\n): (...args: Parameters<F>) => void {\n  let timeout: number;\n  return (...args: Parameters<F>): void => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), waitFor);\n  };\n}\n", "/**\n * This code adapted from char's \"rainbow\" project.\n *\n * https://github.com/char/rainbow/blob/47721ad574c61d59921435a2bff41b9fd582540d/src/util/elem.ts\n *\n * It's licensed under the terms of the WTFPL.\n *\n * https://bsky.app/profile/pet.bun.how/post/3l7vv6ddjn426\n */\n\n// deno-lint-ignore-file ban-types\n\nexport type ElemProps<E extends Element> = {\n  [K in keyof E as E[K] extends Function ? never : K]?: E[K];\n};\n\n// Just a shorthand for a long type name.\ntype HTMLElemTagNameMap = HTMLElementTagNameMap;\n\n// Children can be built from an existing element, string, or text.\ntype IntoChild = Element | string | Text;\n\n// We permit adding classes and data attributes.\ntype Extras = {\n  classList?: string[];\n  dataset?: Partial<Record<string, string>>;\n};\n\n// Attributes to add.\ntype Attrs<K extends keyof HTMLElemTagNameMap> =\n  | ElemProps<HTMLElemTagNameMap[K]>\n  | ElemProps<HTMLElemTagNameMap[K]>[];\n\n// A little way to reduce an object down to only defined entries, since\n// entries can have a key but an undefined value.\nfunction removeUndefinedValues(x: object): object {\n  const entries = Object.entries(x).filter(([_k, v]) => v !== undefined);\n  return Object.fromEntries(entries);\n}\n\n/**\n * Construct a new HTMLElement\n */\nexport function elem<K extends keyof HTMLElemTagNameMap>(\n  tag: K,\n  attrs: Attrs<K> = {},\n  extras: Extras = {},\n  children: IntoChild[] = [],\n): HTMLElemTagNameMap[K] {\n  // Create the new element.\n  const element = document.createElement(tag);\n\n  // Assign any defined values from `attrs`.\n  Object.assign(element, removeUndefinedValues(attrs));\n\n  // Fill in any provided classes.\n  if (extras.classList) {\n    extras.classList.forEach((c) => element.classList.add(c));\n  }\n\n  // Fill in any assigned data attributes.\n  if (extras.dataset) {\n    Object.entries(extras.dataset)\n      .filter(([_k, v]) => v !== undefined)\n      .forEach(([k, v]) => (element.dataset[k] = v));\n  }\n\n  // Populate any children.\n  const nodes = children.map(\n    (e) => (typeof e === \"string\" ? document.createTextNode(e) : e)\n  );\n  element.append(...nodes);\n\n  return element;\n}\n", "import { debounce } from \"../util/event.ts\";\nimport { elem } from \"../util/html.ts\";\nimport { querySelector } from \"../util/web.ts\";\n\n/**\n * Sets up functionality for opening and closing the search modal.\n */\nexport function setupSearchModal() {\n  const $button = querySelector(\"#search-button\");\n  const $modal = querySelector(\"#search-modal\");\n  const $modalClose = querySelector(\"#search-modal-close\");\n  const $modalShroud = querySelector(\"#search-modal-shroud\");\n  const $modalBox = querySelector(\"#search-modal-box\");\n  const $searchInput = querySelector(\"#search-input\");\n\n  // Need all of these together to make sure clicking the *background* closes\n  // the search modal, but clicking inside the box (anywhere other than the\n  // close button) does *not* close the modal.\n  $button.addEventListener(\n    \"click\",\n    (e) => toggleModal(e, $modal, $searchInput),\n  );\n  $modalShroud.addEventListener(\n    \"click\",\n    (e) => toggleModal(e, $modal, $searchInput),\n  );\n  $modalClose.addEventListener(\n    \"click\",\n    (e) => toggleModal(e, $modal, $searchInput),\n  );\n  $modalBox.addEventListener(\"click\", (e) => e.stopPropagation());\n\n  // Keyboard shortcuts.\n  document.addEventListener(\"keydown\", (e) => {\n    // 'Meta+K' to open or close the modal.\n    if (e.metaKey === true && e.shiftKey === false && e.key === \"k\") {\n      e.preventDefault();\n      $button.click();\n      return;\n    }\n\n    if (modalIsOpen($modal)) {\n      switch (e.key) {\n        case \"Escape\":\n          e.preventDefault();\n          $modalShroud.click();\n          return;\n        case \"ArrowDown\":\n          // TODO: Focus the next result in the search results.\n          break;\n        case \"ArrowUp\":\n          // TODO: Focus the prior result in the search result.\n          break;\n        default:\n          break;\n      }\n    }\n  });\n}\n\n/**\n * Toggle whether the modal is open or not.\n */\nfunction toggleModal(\n  e: MouseEvent,\n  $modal: HTMLElement,\n  $searchInput: HTMLElement,\n) {\n  e.preventDefault();\n  $modal.classList.toggle(\"hidden\");\n  if (modalIsOpen($modal)) $searchInput.focus();\n}\n\n/**\n * Check if the modal is open.\n */\nfunction modalIsOpen($modal: HTMLElement): boolean {\n  return !$modal.classList.contains(\"hidden\");\n}\n\n/**\n * Elasticlunr is the library Zola uses for search integration, and it doesn't\n * provide TypeScript type definitions. So the definitions here are just enough\n * to get Deno's linter to stop complaining, but they do mean we don't really\n * get type-checking protection for interacting with the Elasticluner API.\n *\n * In the future if we wanted type-checking for this API we could replace the\n * 'any' with an actual description of the relevant types.\n */\n\n// Define the Index type.\ntype Index = {\n  // deno-lint-ignore no-explicit-any\n  load: (data: Promise<any>) => Promise<Index>;\n  // deno-lint-ignore no-explicit-any\n  search: (query: string, options?: any) => SearchResult;\n};\n\n/**\n * Data returned from the Elasticlunr search function\n */\ntype SearchResult = {\n  ref: string;\n  score: number;\n  doc: {\n    body: string;\n    id: string;\n    title: string;\n  };\n};\n\n// Define the \"elasticlunr\" global.\ndeclare global {\n  let elasticlunr: {\n    Index: Index;\n    // deno-lint-ignore no-explicit-any\n    stemmer: any;\n  };\n}\n\n/**\n * The path to the search index created by Zola.\n */\nconst SEARCH_INDEX: string = \"/search_index.en.json\";\n\n/**\n * The maximum number of results to show in searches.\n */\nconst MAX_ITEMS: number = 6;\n\n/**\n * Setup the search operation within the search modal.\n */\nexport function setupSearch() {\n  const $searchInput = querySelector(\"#search-input\") as HTMLInputElement;\n  const $searchResults = querySelector(\"#search-results\");\n  const $searchResultsItems = querySelector(\"#search-results-items\");\n\n  // The search index, representing the content of the site.\n  let index: Promise<Index>;\n\n  // The current term being searched by the user.\n  let currentTerm = \"\";\n\n  const initIndex = async function () {\n    // If no index, then asynchronously load it from the index file.\n    if (index === undefined) {\n      index = fetch(SEARCH_INDEX)\n        .then(\n          async function (response) {\n            return await elasticlunr.Index.load(await response.json());\n          },\n        );\n    }\n\n    return await index;\n  };\n\n  $searchInput.addEventListener(\n    \"keyup\",\n    debounce(150, async function () {\n      const term = $searchInput.value.trim();\n      if (term === currentTerm) return;\n\n      $searchResults.style.display = term === \"\" ? \"none\" : \"block\";\n      $searchResultsItems.innerHTML = \"\";\n\n      currentTerm = term;\n      if (currentTerm === \"\") return;\n\n      const results: SearchResult[] = (await initIndex())\n        .search(term, {\n          bool: \"AND\",\n          fields: {\n            title: { boost: 2 },\n            body: { boost: 1 },\n          },\n        });\n\n      if (results.length === 0) {\n        $searchResults.style.display = \"none\";\n        return;\n      }\n\n      for (let i = 0; i < Math.min(results.length, MAX_ITEMS); ++i) {\n        const entry = buildListEntry(results[i], currentTerm.split(\" \"));\n        $searchResultsItems.appendChild(entry);\n      }\n    }),\n  );\n}\n\n/**\n * Build an HTML element for each item in the search results.\n */\nfunction buildListEntry(data: SearchResult, terms: string[]): HTMLElement {\n  return elem(\"li\", {}, {\n    classList: [\"border-t\", \"border-neutral-300\", \"dark:border-neutral-500\"],\n  }, [\n    elem(\"div\", {}, {}, [\n      elem(\"a\", { href: data.ref }, {\n        classList: [\n          \"block\",\n          \"px-5\",\n          \"py-2\",\n          \"hover:bg-blue-50\",\n          \"dark:hover:bg-blue-500\",\n          \"hover:text-blue-500\",\n          \"dark:hover:text-white\",\n          \"group\",\n        ],\n      }, [\n        elem(\"span\", {}, {\n          classList: [\"block\", \"text-base\", \"mb-1\", \"font-medium\"],\n        }, [\n          data.doc.title,\n        ]),\n        elem(\"span\", {}, {\n          classList: [\n            \"block\",\n            \"text-neutral-500\",\n            \"text-sm\",\n            \"group-hover:text-blue-500\",\n          ],\n        }, [\n          makeTeaser(data.doc.body, terms),\n        ]),\n      ]),\n    ]),\n  ]);\n}\n\n/**\n * Construct a usable preview of the body that matched the search term.\n *\n * This code adapted from Zola's sample search code, itself adapted from mdbook.\n * Licensed under the terms of the MIT license.\n *\n * https://github.com/getzola/zola/blob/master/LICENSE\n */\nfunction makeTeaser(body: string, terms: string[]): HTMLElement {\n  const TERM_WEIGHT = 40;\n  const NORMAL_WORD_WEIGHT = 2;\n  const FIRST_WORD_WEIGHT = 8;\n  const TEASER_MAX_WORDS = 15;\n\n  const stemmedTerms = terms.map(function (w) {\n    return elasticlunr.stemmer(w.toLowerCase());\n  });\n\n  let termFound = false;\n  let index = 0;\n  // contains elements of [\"word\", weight, index_in_document]\n  const weighted: ([string, number, number])[] = [];\n\n  // split in sentences, then words\n  const sentences = body.toLowerCase().split(\". \");\n\n  for (const i in sentences) {\n    const words = sentences[i].split(\" \");\n    let value = FIRST_WORD_WEIGHT;\n\n    for (const j in words) {\n      const word = words[j];\n\n      if (word.length > 0) {\n        for (const k in stemmedTerms) {\n          if (elasticlunr.stemmer(word).startsWith(stemmedTerms[k])) {\n            value = TERM_WEIGHT;\n            termFound = true;\n          }\n        }\n\n        weighted.push([word, value, index]);\n        value = NORMAL_WORD_WEIGHT;\n      }\n\n      index += word.length;\n      // ' ' or '.' if last word in sentence\n      index += 1;\n    }\n\n    // because we split at a two-char boundary '. '\n    index += 1;\n  }\n\n  if (weighted.length === 0) {\n    const final = body;\n    const span = elem(\"span\", {}, {}, []);\n    span.innerHTML = final;\n    return span;\n  }\n\n  const windowWeights: number[] = [];\n  const windowSize = Math.min(weighted.length, TEASER_MAX_WORDS);\n  // We add a window with all the weights first\n  let curSum = 0;\n  for (let i = 0; i < windowSize; i++) {\n    curSum += weighted[i][1];\n  }\n  windowWeights.push(curSum);\n\n  for (let i = 0; i < weighted.length - windowSize; i++) {\n    curSum -= weighted[i][1];\n    curSum += weighted[i + windowSize][1];\n    windowWeights.push(curSum);\n  }\n\n  // If we didn't find the term, just pick the first window\n  let maxSumIndex = 0;\n  if (termFound) {\n    let maxFound = 0;\n    // backwards\n    for (let i = windowWeights.length - 1; i >= 0; i--) {\n      if (windowWeights[i] > maxFound) {\n        maxFound = windowWeights[i];\n        maxSumIndex = i;\n      }\n    }\n  }\n\n  const teaser: string[] = [];\n  let startIndex = weighted[maxSumIndex][2];\n  for (let i = maxSumIndex; i < maxSumIndex + windowSize; i++) {\n    const word = weighted[i];\n    if (startIndex < word[2]) {\n      // missing text from index to start of `word`\n      teaser.push(body.substring(startIndex, word[2]));\n      startIndex = word[2];\n    }\n\n    // add <em/> around search terms\n    if (word[1] === TERM_WEIGHT) {\n      teaser.push(\"<b>\");\n    }\n    startIndex = word[2] + word[0].length;\n    teaser.push(body.substring(word[2], startIndex));\n\n    if (word[1] === TERM_WEIGHT) {\n      teaser.push(\"</b>\");\n    }\n  }\n  teaser.push(\"\u2026\");\n  const final = teaser.join(\"\");\n  const span = elem(\"span\", {}, {}, []);\n  span.innerHTML = final;\n  return span;\n}\n", "import { querySelectorAll } from \"./web.ts\";\n\n/**\n * Get the theme that's currently set by the user.\n */\nexport function getConfiguredTheme(): KnownTheme {\n  const theme = localStorage.getItem(\"theme\") ?? \"system\";\n\n  switch (theme) {\n    case \"dark\":\n      return theme;\n    case \"light\":\n      return theme;\n    case \"system\":\n      return theme;\n    default:\n      throw new ThemeError(theme);\n  }\n}\n\n/**\n * Update the theme on the page and in local storage.\n */\nexport function setPageTheme(theme: string | undefined) {\n  if (theme === undefined) throw new ThemeError(theme);\n\n  switch (theme) {\n    case \"system\":\n      localStorage.removeItem(\"theme\");\n      switch (preferredTheme()) {\n        case \"dark\":\n          document.documentElement.classList.add(\"dark\");\n          break;\n        case \"light\":\n          document.documentElement.classList.remove(\"dark\");\n          break;\n      }\n\n      break;\n\n    case \"light\":\n      localStorage.setItem(\"theme\", theme);\n      document.documentElement.classList.remove(\"dark\");\n      break;\n\n    case \"dark\":\n      localStorage.setItem(\"theme\", theme);\n      document.documentElement.classList.add(\"dark\");\n      break;\n\n    default:\n      throw new ThemeError(theme);\n  }\n\n  setButtons(theme);\n}\n\n/**\n * The known theme selector options.\n */\ntype KnownTheme = \"dark\" | \"light\" | \"system\";\n\n/**\n * A theme that can be pulled explicitly from local storage.\n */\ntype StoredTheme = \"dark\" | \"light\";\n\n/**\n * Set as active the button that matches the theme.\n *\n * Make sure to set all another buttons as inactive.\n */\nfunction setButtons(theme: KnownTheme) {\n  querySelectorAll(\".theme-option\").forEach(($option) => {\n    if ($option.dataset.theme === theme) $option.dataset.active = \"true\";\n    else delete $option.dataset.active;\n  });\n}\n\n/**\n * Get the user's preferred theme based on a media query.\n */\nfunction preferredTheme(): StoredTheme {\n  const prefersDark =\n    globalThis.window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\n  if (prefersDark) return \"dark\";\n  return \"light\";\n}\n\n/**\n * Indicates an error during theme selection.\n */\nclass ThemeError extends Error {\n  constructor(theme: string | undefined) {\n    super(\n      `could not determine theme: '${theme || \"undefined\"}'`,\n    );\n  }\n}\n", "import { querySelectorAll } from \"../util/web.ts\";\nimport { setPageTheme } from \"../util/theme.ts\";\n\n/**\n * Sets up the logic for updating theme post-load.\n *\n * Note that this does _not_ handle setting the theme initially on page load.\n * That's done in a separate file since it needs to happen in the head, whereas\n * this code runs at the end of the body.\n */\nexport function setupThemeController() {\n  querySelectorAll(\".theme-option\").forEach(($option) => {\n    $option.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      setPageTheme($option.dataset.theme);\n    });\n  });\n}\n", "import { setupDocsNav } from \"./docs.ts\";\nimport { setupInstallerPicker } from \"./installer.ts\";\nimport { setupSmoothScrolling } from \"./scroll.ts\";\nimport { setupSearch, setupSearchModal } from \"./search.ts\";\nimport { setupThemeController } from \"./theme.ts\";\n\n/**\n * Run all page setup operations, initializing all interactive widgets.\n *\n * There are currently three widgets:\n *\n * - Theme Controller in the navigation bar.\n * - Installer Picker on the homepage.\n * - Search button in the navigation bar.\n */\nfunction setup() {\n  setupThemeController();\n  setupInstallerPicker();\n  setupSearchModal();\n  setupSearch();\n  setupSmoothScrolling();\n  setupDocsNav();\n}\n\n/**\n * Do setup, logging errors to the console.\n */\n(function () {\n  try {\n    setup();\n  } catch (e) {\n    console.error(e);\n  }\n})();\n"],
  "mappings": "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",
  "names": ["updateIcon", "$node", "oldName", "newName", "newIconUrl", "getIconUrl", "setIconUrl", "iconUrl", "XLINK_NS", "IconError", "url", "querySelector", "selector", "$elem", "QueryError", "querySelectorAll", "$elems", "copyToClipboard", "text", "reason", "ClipboardError", "source", "msg", "setupDocsNav", "$toggles", "querySelectorAll", "$toggle", "$toggleIcon", "e", "$parent", "$subsection", "sectionIsHidden", "updateIcon", "setupInstallerPicker", "$buttons", "$cmd", "$copy", "$copyIcon", "querySelectorAll", "querySelector", "$button", "e", "installerForPlatform", "copyToClipboard", "updateIcon", "platform", "UnknownPlatformError", "UNIX_INSTALLER", "WINDOWS_INSTALLER", "HOST", "setupSmoothScrolling", "querySelectorAll", "anchor", "e", "targetHeader", "headerPosition", "querySelector", "scrollAmount", "offsetPosition", "debounce", "waitFor", "func", "timeout", "args", "removeUndefinedValues", "x", "entries", "_k", "v", "elem", "tag", "attrs", "extras", "children", "element", "c", "k", "nodes", "e", "setupSearchModal", "$button", "querySelector", "$modal", "$modalClose", "$modalShroud", "$modalBox", "$searchInput", "e", "toggleModal", "modalIsOpen", "SEARCH_INDEX", "MAX_ITEMS", "setupSearch", "$searchResults", "$searchResultsItems", "index", "currentTerm", "initIndex", "response", "debounce", "term", "results", "i", "entry", "buildListEntry", "data", "terms", "elem", "makeTeaser", "body", "stemmedTerms", "w", "termFound", "weighted", "sentences", "words", "value", "j", "word", "k", "final", "span", "windowWeights", "windowSize", "curSum", "maxSumIndex", "maxFound", "teaser", "startIndex", "setPageTheme", "theme", "ThemeError", "preferredTheme", "setButtons", "querySelectorAll", "$option", "setupThemeController", "querySelectorAll", "$option", "e", "setPageTheme", "setup", "setupThemeController", "setupInstallerPicker", "setupSearchModal", "setupSearch", "setupSmoothScrolling", "setupDocsNav"]
}
