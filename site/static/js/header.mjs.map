{
  "version": 3,
  "sources": ["../../scripts/src/util/web.ts", "../../scripts/src/util/theme.ts", "../../scripts/src/header/theme.ts", "../../scripts/src/header/main.ts"],
  "sourcesContent": ["/**\n * document.querySelector with type conversion and error handling.\n */\nexport function querySelector(selector: string): HTMLElement {\n  const $elem = document.querySelector(selector);\n  if ($elem === null) throw new QueryError(`could not find ${selector}`);\n  return $elem as HTMLElement;\n}\n\n/**\n * document.querySelectorAll with type conversions and error handling.\n */\nexport function querySelectorAll(selector: string): Array<HTMLElement> {\n  const $elems = document.querySelectorAll(selector);\n  if ($elems === null) throw new QueryError(`could not find all '${selector}'`);\n  return Array.from($elems) as Array<HTMLElement>;\n}\n\n/**\n * navigator.clipboard.writeText with error handling.\n */\nexport function copyToClipboard(text: string) {\n  navigator.clipboard.writeText(text).then(null, (reason) => {\n    throw new ClipboardError(reason);\n  });\n}\n\n/**\n * Indicates an error while attempting to put data into the clipboard.\n */\nclass ClipboardError extends Error {\n  constructor(source: unknown) {\n    super(`clipboard copy rejected: '${source}'`);\n  }\n}\n\n/**\n * Indicates an error while trying to select one or more elements on the page.\n */\nclass QueryError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n", "import { querySelectorAll } from \"./web.ts\";\n\n/**\n * Get the theme that's currently set by the user.\n */\nexport function getConfiguredTheme(): KnownTheme {\n  const theme = localStorage.getItem(\"theme\") ?? \"system\";\n\n  switch (theme) {\n    case \"dark\":\n      return theme;\n    case \"light\":\n      return theme;\n    case \"system\":\n      return theme;\n    default:\n      throw new ThemeError(theme);\n  }\n}\n\n/**\n * Update the theme on the page and in local storage.\n */\nexport function setPageTheme(theme: string | undefined) {\n  if (theme === undefined) throw new ThemeError(theme);\n\n  switch (theme) {\n    case \"system\":\n      localStorage.removeItem(\"theme\");\n      switch (preferredTheme()) {\n        case \"dark\":\n          document.documentElement.classList.add(\"dark\");\n          break;\n        case \"light\":\n          document.documentElement.classList.remove(\"dark\");\n          break;\n      }\n\n      break;\n\n    case \"light\":\n      localStorage.setItem(\"theme\", theme);\n      document.documentElement.classList.remove(\"dark\");\n      break;\n\n    case \"dark\":\n      localStorage.setItem(\"theme\", theme);\n      document.documentElement.classList.add(\"dark\");\n      break;\n\n    default:\n      throw new ThemeError(theme);\n  }\n\n  setButtons(theme);\n}\n\n/**\n * The known theme selector options.\n */\ntype KnownTheme = \"dark\" | \"light\" | \"system\";\n\n/**\n * A theme that can be pulled explicitly from local storage.\n */\ntype StoredTheme = \"dark\" | \"light\";\n\n/**\n * Set as active the button that matches the theme.\n *\n * Make sure to set all another buttons as inactive.\n */\nfunction setButtons(theme: KnownTheme) {\n  querySelectorAll(\".theme-option\").forEach(($option) => {\n    if ($option.dataset.theme === theme) $option.dataset.active = \"true\";\n    else delete $option.dataset.active;\n  });\n}\n\n/**\n * Get the user's preferred theme based on a media query.\n */\nfunction preferredTheme(): StoredTheme {\n  const prefersDark =\n    globalThis.window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\n  if (prefersDark) return \"dark\";\n  return \"light\";\n}\n\n/**\n * Indicates an error during theme selection.\n */\nclass ThemeError extends Error {\n  constructor(theme: string | undefined) {\n    super(\n      `could not determine theme: '${theme || \"undefined\"}'`,\n    );\n  }\n}\n", "import { getConfiguredTheme, setPageTheme } from \"../util/theme.ts\";\n\n/**\n * Sets up the logic for updating theme pre-load.\n */\nexport function setupTheme() {\n  setPageTheme(getConfiguredTheme());\n}\n", "import { setupTheme } from \"./theme.ts\";\n\n/**\n * Run all page setup operations, initializing all interactive widgets.\n */\nfunction setup() {\n  setupTheme();\n}\n\n/**\n * Do setup, logging errors to the console.\n */\n(function () {\n  try {\n    setup();\n  } catch (e) {\n    console.error(e);\n  }\n})();\n"],
  "mappings": "AAYO,SAASA,EAAiBC,EAAsC,CACrE,IAAMC,EAAS,SAAS,iBAAiBD,CAAQ,EACjD,GAAIC,IAAW,KAAM,MAAM,IAAIC,EAAW,uBAAuBF,CAAQ,GAAG,EAC5E,OAAO,MAAM,KAAKC,CAAM,CAC1B,CAuBA,IAAME,EAAN,cAAyB,KAAM,CAC7B,YAAYC,EAAa,CACvB,MAAMA,CAAG,CACX,CACF,ECtCO,SAASC,GAAiC,CAC/C,IAAMC,EAAQ,aAAa,QAAQ,OAAO,GAAK,SAE/C,OAAQA,EAAO,CACb,IAAK,OACH,OAAOA,EACT,IAAK,QACH,OAAOA,EACT,IAAK,SACH,OAAOA,EACT,QACE,MAAM,IAAIC,EAAWD,CAAK,CAC9B,CACF,CAKO,SAASE,EAAaF,EAA2B,CACtD,GAAIA,IAAU,OAAW,MAAM,IAAIC,EAAWD,CAAK,EAEnD,OAAQA,EAAO,CACb,IAAK,SAEH,OADA,aAAa,WAAW,OAAO,EACvBG,EAAe,EAAG,CACxB,IAAK,OACH,SAAS,gBAAgB,UAAU,IAAI,MAAM,EAC7C,MACF,IAAK,QACH,SAAS,gBAAgB,UAAU,OAAO,MAAM,EAChD,KACJ,CAEA,MAEF,IAAK,QACH,aAAa,QAAQ,QAASH,CAAK,EACnC,SAAS,gBAAgB,UAAU,OAAO,MAAM,EAChD,MAEF,IAAK,OACH,aAAa,QAAQ,QAASA,CAAK,EACnC,SAAS,gBAAgB,UAAU,IAAI,MAAM,EAC7C,MAEF,QACE,MAAM,IAAIC,EAAWD,CAAK,CAC9B,CAEAI,EAAWJ,CAAK,CAClB,CAiBA,SAASI,EAAWJ,EAAmB,CACrCK,EAAiB,eAAe,EAAE,QAASC,GAAY,CACjDA,EAAQ,QAAQ,QAAUN,EAAOM,EAAQ,QAAQ,OAAS,OACzD,OAAOA,EAAQ,QAAQ,MAC9B,CAAC,CACH,CAKA,SAASH,GAA8B,CAIrC,OAFE,WAAW,OAAO,WAAW,8BAA8B,EAAE,QAEvC,OACjB,OACT,CAKA,IAAMF,EAAN,cAAyB,KAAM,CAC7B,YAAYD,EAA2B,CACrC,MACE,+BAA+BA,GAAS,WAAW,GACrD,CACF,CACF,EC9FO,SAASO,GAAa,CAC3BC,EAAaC,EAAmB,CAAC,CACnC,CCFA,SAASC,GAAQ,CACfC,EAAW,CACb,EAKC,UAAY,CACX,GAAI,CACFD,EAAM,CACR,OAAS,EAAG,CACV,QAAQ,MAAM,CAAC,CACjB,CACF,GAAG",
  "names": ["querySelectorAll", "selector", "$elems", "QueryError", "QueryError", "msg", "getConfiguredTheme", "theme", "ThemeError", "setPageTheme", "preferredTheme", "setButtons", "querySelectorAll", "$option", "setupTheme", "setPageTheme", "getConfiguredTheme", "setup", "setupTheme"]
}
