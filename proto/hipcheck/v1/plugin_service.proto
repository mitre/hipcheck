syntax = "proto3";
package hipcheck.v1;

import "messages/query_schemas_request.proto";
import "messages/query_schemas_response.proto";
import "messages/set_config_request.proto";
import "messages/set_config_response.proto";
import "messages/default_policy_expr_request.proto";
import "messages/default_policy_expr_response.proto";
import "messages/explain_default_query_request.proto";
import "messages/explain_default_query_response.proto";
import "messages/query_request.proto";
import "messages/query_response.proto";

/**
 * Defines a Hipcheck plugin, able to interact with Hipcheck to provide
 * support for additional analyses and sources of data.
 */
service PluginService {
    /**
     * Get schemas for all supported queries by the plugin.
     *
     * This is used by Hipcheck to validate that:
     *
     * - The plugin supports a default query taking a `target` type if used
     *   as a top-level plugin in the user's policy file.
     * - That requests sent to the plugin and data returned by the plugin
     *   match the schema during execution.
     */
    rpc QuerySchemas (QuerySchemasRequest) returns (stream QuerySchemasResponse);

    /**
     * Hipcheck sends all child nodes for the plugin from the user's policy
     * file to configure the plugin.
     */
    rpc SetConfig (SetConfigRequest) returns (SetConfigResponse);

    /**
     * Get the default policy for a plugin, which may additionally depend on
     * the plugin's configuration.
     */
    rpc DefaultPolicyExpr (DefaultPolicyExprRequest) returns (DefaultPolicyExprResponse);

    /**
     * Get an explanation of what the default query returns, to use when
     * reporting analysis results to users.
     *
     * Note that, because users can specify their own policy expression, this
     * explanation *should not* assume the user has used the default policy
     * expression, if one is provided by the plugin.
     */
    rpc ExplainDefaultQuery (ExplainDefaultQueryRequest)
        returns (ExplainDefaultQueryResponse);

    /**
     * Open a bidirectional streaming RPC to enable a request/response
     * protocol between Hipcheck and a plugin, where Hipcheck can issue
     * queries to the plugin, and the plugin may issue queries to _other_
     * plugins through Hipcheck.
     *
     * Queries are cached by the publisher name, plugin name, query name,
     * and key, and if a match is found for those four values, then
     * Hipcheck will respond with the cached result of that prior matching
     * query rather than running the query again.
     */
    rpc Query (stream QueryRequest) returns (stream QueryResponse);
}
